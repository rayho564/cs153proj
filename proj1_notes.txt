Thread vs. Process
	can run several threads on a single process for a sense of concurrency
	better performance using several threads

Schedules
	Block & unblocking threads
		block = stops and unschedules
		threades = resumes and schedules
Reason why changing orginal thread sleeping because while(1) takes
	a lot of cpu usages

void timer_sleep(int64_t ticks){
	//Get thread
	  struct thread* t = thread_current();
	//Figure out when to awake(timer_ticks())
	// obtain current ticks then add certain amount of ticks to awakeTime
	  awakeTime;
	  ASSERT(..); //Leave ASSERTS
	//When messing with lists/interrupts do 
		t curstate = intr_disable(); // not actual code
	//Add t to a list of sleeping threads
	//can order list by awakeTime
		//Pop first when needed to awake then point to next
	// interrupt enable
		intr(curstate) // not actual code
	//Put thread to sleep->Block
}

void timer_interrupt(){
	tickers++;
	thread_tick();
	//look through list
	  //compare thread t awakeTime to ticks
	  //if time to awake, unblock
	  //Add remove from sleeping list
	  //Part B: Could start running if object Priority

Threads 	Ready_list
			t_2 t_5 t_6 t_1
		\\Anytime you block - remove from ready_list
		\\unblock -> add

